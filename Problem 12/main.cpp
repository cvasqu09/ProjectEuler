#include <iostream>
#include <vector>
#include <math.h>

using namespace std;

//Problem 12: Find the value of the first triangle number to have over 500
//divisors. The nth triangle number is generated by adding up the first n
//natural numbers

//Find the nth_triangle number
int nth_triangular(int x)
{
    int sum = 0;
    for(int i = 0; i <= x; ++i)
        sum += i;
    return sum;
}


int find_divisors(int x)
{
    int num = 0;
    //If x is one
    if(x == 1){
        num = 1;
    } else {
        //Only need to check up until the square root
        for(int i = 1; i < int(sqrt(x) + 1); ++i){
            if(sqrt(x) == i){       //If x is a perfect square
                num += 1;           //Add one
                ++i;
            } else if(x % i == 0){  //If x is divisible by i
                num += 2;           //Add two (one from lower sqrt, one from higher)
            }
        }
    }
    return num;
}

int main()
{
    int numDivisors = 0;
    int triangularNum = 1;
    int i = 1;
    while(numDivisors < 500){
        triangularNum = nth_triangular(i);
        numDivisors = find_divisors(nth_triangular(i));
        ++i;
    }
    cout << triangularNum << endl;
    return 0;
}
